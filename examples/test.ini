; Test config file for ini_example.c and INIReaderTest.cpp
[algorithm]
# vectorized == true: uses Eigen3 and OpenMP to read all input data and labels into a matrix
#                     where each column is training example 
# vectorized == false: read all input data and labels into a vector of column vectors and 
#                      iterates over each training example
vectorised = true
# threaded only matters if vectorized == false and we are exeicuting using loops over all the data
# threaded == true: uses the intel oneTBB library to split the loop over each of the examples
#                   over the available cores
threaded = true


[network]
; comma seperated list of the number of neurons per layer, including input and output layers                     
architecture = 784,50,10
; non-negative double      
learning_rate = 1.0           
# true = use existing calibration that has been saved to disk using the format
#   {parameter_file_prefix}_w0; ... ,{parameter_file_prefix}_wn; and
#   {parameter_file_prefix}_b0; ... ,{parameter_file_prefix}_bn;
# true = start with some 'random' weights, ignore the next two parameters
use_existing_parameters = true
existing_parameters_path = E:/Code/kaggle/digits/data/convergence/
existing_parameters_file_prefix = combined_3_4

[data]
train = true
epochs = 2001
# option to train from a starting point or from random
input_data_file = E:/Code/kaggle/digits/data/train_95.csv
; the percentage [0.0, 1.0] of data to be used for training 
training_data_split = 1.0 
# only applies if train = true. Writes weights and constants to a series of files
# Note if write_trained_parameters_to_file == true AND  existing_parameters_path == false the 'random' input files
# that start the NN are also written out to the directory
write_trained_parameters_to_file = true  
path_to_write_trained_parameters = E:/Code/kaggle/digits/data/convergence/
# files created using {parameter_file_prefix}_w0; ... ,{parameter_file_prefix}_wn; and
#                     {parameter_file_prefix}_b0; ... ,{parameter_file_prefix}_bn;
parameter_file_prefix = combined_b
output_training_cost = true
output_cost_every_n_epochs = 100

[runtest]
test_after_training = false 
# test_data_from_file will NOT be considered if train = true
; data must be in the same format as the training data, i.e. one file with lables and features
test_data_from_file = false 
test_data_file = ../../data/train_debug.csv




